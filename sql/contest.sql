-- database tables create script
-- assumes database 'hamtest' owned by 'hamtest_owner'
-- in order tu run this script you need to be logged as user with create table, create constraint privileges

/* Connect to hamtest first before you start executing DDL 
--\c hamtest
*/
--> Level 0: Contest
-- Primary key sequence
drop table if exists QSO cascade ;
drop table if exists LOGRAWTEXT ;
drop table if exists LOGFILE cascade ;
drop table if exists CONTEST_STATUS cascade ;
drop table if exists CABRILLO_TEMPLATE cascade ;
drop table if exists CONTEST cascade ;

create table CONTEST (
   CTST_PK       serial primary key,
   CTST_NAME     varchar(255) not null,
   UTC_FROM timestamp not null,
   UTC_TO   timestamp not null,
   CABR_TEMPLATE_ID   varchar(80) default 'GENERAL',
   NOTE          text,
   CTST_STATUS   char(1)
) ;

alter table CONTEST owner to HAMTEST_OWNER ;

alter table CONTEST 
  add constraint CU_CONTEST_NAME_UNIQUE unique (CTST_NAME) ;
alter table CONTEST
  add constraint C_CONTEST_START_END check ( UTC_FROM < UTC_TO );
create index X_CTST_FROM on CONTEST (UTC_FROM) ;
create index X_CTST_TO   on CONTEST (UTC_TO) ;

comment on table CONTEST is 'Contest list' ;
comment on column CONTEST.CTST_PK is 'Autogenerated primary key' ;
comment on column CONTEST.CTST_NAME is 'Contest name (must be unique)' ;
comment on column CONTEST.UTC_FROM is 'Contest start date and time in UTC (inclusive)' ;
comment on column CONTEST.UTC_TO is 'Contest end date and time in UTC (inclusive)' ;
comment on column CONTEST.NOTE is 'Any remark about contest' ;
comment on column CONTEST.CABR_TEMPLATE_ID is 'Name of the cabrillo format template set to be used';
comment on column CONTEST.CTST_STATUS is 'Contest evaluation status as defined in CONTEST_STATUS' ;

create table CONTEST_STATUS (
   CTST_STATUS char(1) not null unique,
   STATUS_NAME varchar(80) not null unique,
   STATUS_DESCR text 
);
alter table CONTEST_STATUS owner to HAMTEST_OWNER ;

comment on table CONTEST_STATUS is 'List of codes for contest status' ;
comment on column CONTEST_STATUS.CTST_STATUS is  'Status code' ;
comment on column CONTEST_STATUS.STATUS_NAME is  'Status name' ;
comment on column CONTEST_STATUS.STATUS_DESCR is 'Status definition' ;

create table LOGFILE (
   LOGF_PK       serial primary key,
   LOGF_FILENAME varchar(255) not null,
   UPLOADED_TS   timestamptz not null,
   LOG_FORMAT    varchar(80) not null default 'N/A',
   CALLSIGN      varchar(255) not null,
   CATEGORY      varchar(255) not null default 'CHECKLOG',
   EMAIL         varchar(120),
   ALL_HEADERS   json,
   NOTE          text,
   CTST_PK       integer references CONTEST(CTST_PK) 
)  ;

alter table LOGFILE owner to HAMTEST_OWNER ;
   
create index X_LOGF_FILENAME on LOGFILE(LOGF_FILENAME) ;
create index X_LOGF_UPLOAD   on LOGFILE(UPLOADED_TS) ;
create index X_LOGF_CALLSIGN on LOGFILE(CALLSIGN) ;

comment on table LOGFILE                is 'Uploaded log files information' ;
comment on column LOGFILE.LOGF_PK       is 'Autogenerated primary key' ;
comment on column LOGFILE.LOGF_FILENAME is 'Uploaded file name' ;
comment on column LOGFILE.UPLOADED_TS   is 'File upload time' ;
comment on column LOGFILE.LOG_FORMAT    is 'Auto-identified log file format' ;
comment on column LOGFILE.CALLSIGN      is 'Logging station call sign' ;
comment on column LOGFILE.CATEGORY      is 'Log entry category from the log file' ;
comment on column LOGFILE.EMAIL         is 'E-mail address specified in log file header' ;
comment on column LOGFILE.ALL_HEADERS   is 'All headers as JSON object' ;
comment on column LOGFILE.CTST_PK       is 'Foreign key to CONTEST' ;
comment on column LOGFILE.NOTE          is 'Any remark about log file' ;

create table LOGRAWTEXT (
  LRT_PK  bigserial ,
  LOGF_PK int references LOGFILE(LOGF_PK) ,
  LINENUM int not null,
  LINETEXT varchar(255),
  constraint CU_LOGRAWTEXT unique (LOGF_PK, LINENUM)
) ;

alter table LOGRAWTEXT owner to HAMTEST_OWNER ;

comment on table LOGRAWTEXT is 'Raw text of the log file' ;
comment on column LOGRAWTEXT.LOGF_PK is  'Reference to logfile header';
comment on column LOGRAWTEXT.LINENUM is  'line number in the file';
comment on column LOGRAWTEXT.LINETEXT is 'the actual text line';

create table QSO (
  QSO_PK    bigserial primary key,
  LOGF_PK   int    not null references LOGFILE( LOGF_PK ), 
  CTST_PK   int    not null references CONTEST( CTST_PK ),
  QSO_TIME  timestamp not null,
  QSO_BAND  varchar(20) not null,
  QSO_MODE  varchar(20) not null,
  MODE_TX   varchar(20),
  CALLS     varchar(80) not null,
  RSTS      varchar(10) null,
  NRS       integer,
  EXC1S     varchar(40),
  EXC2S     varchar(40),
  CALLR     varchar(80) not null,
  RSTR      varchar(10),
  NRR       integer,
  EXC1R     varchar(40),
  EXC2R     varchar(40),
  IS_IGNORED   boolean ,
  IS_PROCESSED boolean ,
  IS_VALID     boolean ,
  ERROR_TYPE   varchar(80)
)  ;

alter table QSO owner to HAMTEST_OWNER ;

comment on table QSO is 'Table of contacts';
comment on column QSO.LOGF_PK is 'Reference to log';
comment on column QSO.QSO_TIME is 'QSO date and time as logged (UTC)';
comment on column QSO.QSO_BAND is 'Frequency band as logged';
comment on column QSO.QSO_MODE is 'QSO mode as logged';
comment on column QSO.CALLS is 'Logging station callsign (should be same as LOGFILE.CALLSIGN)';
comment on column QSO.RSTS is 'RS(T) sent by logging station';
comment on column QSO.NRS is 'Serial number sent by logging station';
comment on column QSO.EXC1S is 'Extra exchange 1 sent by logging stations';
comment on column QSO.EXC2S is 'Extra exchange 2 sent by logging stations';
comment on column QSO.CALLR is 'Contacted station callsign';
comment on column QSO.RSTR is 'RS(T) received by logging station';
comment on column QSO.NRR is 'Serial number received by logging station';
comment on column QSO.EXC1R is 'Extra exchange 1 received by logging station';
comment on column QSO.EXC2R is 'Extra exchange 1 received by logging station';
comment on column QSO.IS_IGNORED is 'TRUE indicates that this record must be ignored (not processed)';
comment on column QSO.IS_PROCESSED is 'TRUE if the record was already processed';
comment on column QSO.IS_VALID is 'TRUE if the record is confirmed (valid)';
comment on column QSO.ERROR_TYPE is 'Error description if the record is not valid';

create table CABRILLO_TEMPLATE (
  TPL_PK    serial,
  TPL_NAME  varchar(20)    not null,
  TPL_DESCR varchar(255),
  TPL_PATTERN varchar(20)  not null,
  TPL_FIELDS  varchar(255) not null
);

alter table CABRILLO_TEMPLATE owner to HAMTEST_OWNER ;

create index X_TEMPLATE_NAME on CABRILLO_TEMPLATE (TPL_NAME);
create unique index X_TEMPLATE_REC  on CABRILLO_TEMPLATE (TPL_NAME, TPL_PATTERN) ;

comment on table CABRILLO_TEMPLATE is 'Cabrillo templates based on patterns' ;
comment on column CABRILLO_TEMPLATE.TPL_PK is 'Autogenerated primary key';
comment on column CABRILLO_TEMPLATE.TPL_DESCR is 'Template description';
comment on column CABRILLO_TEMPLATE.TPL_PATTERN is 'Selection pattern';
comment on column CABRILLO_TEMPLATE.TPL_FIELDS is 'list of template fields';

-- Initial load
begin ;
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('W',
        'WAITING',
        'The contest did not start yet');
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('O',
        'OPEN',
        'Accepting log files');
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('C',
        'CLOSED',
        'Processing started, no more logs accepted');
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('P',
        'PRELIMINARY',
        'Results are calculated, no more changes are possible except when challenged by claims');
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('F',
        'FINAL',
        'Results are final, no chnages are possible');
insert into CONTEST_STATUS (CTST_STATUS,STATUS_NAME,STATUS_DESCR)
values ('X',
        'PUBLISHED',
        'Final results where sent to publishers');
commit ;

-- initial load of cabrillo templates
truncate table CABRILLO_TEMPLATE ;

insert into CABRILLO_TEMPLATE ( TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('GENERAL',
        'General pattern for exchange = RST + serial',
        'CRNCRN',
        'calls,rsts,nrs,callr,rstr,nrr');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('GENERAL',
        'General pattern for exchange = RST + serial + WWLOC (VHF contests)',
        'CRNLCRNL',
        'calls,rsts,nrs,exc1s,callr,rstr,nrr,exc1r');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('OLPARTY',
        'OL-PARTY pattern for ex-OL stations',
        'CRNCCRNC',
        'calls,rsts,nrs,exc1s,callr,rstr,nrr,exc1r');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('OLPARTY',
        'OL-PARTY pattern for non-ex-OL stations',
        'CRNCRNC',
        'calls,rsts,nrs,callr,rstr,nrr,exc1r');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('CAVTEST',
        'CAV Contest pattern for non-members',
        'CRNCR(S|N)',
        'calls,rsts,exc1s,callr,rstr,nrr,exc1r');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('CAVTEST',
        'CAV Contest pattern for members',
        'CRSCR(S|N)',
        'calls,rsts,exc1s,callr,rstr,exc1r');

insert into CABRILLO_TEMPLATE (TPL_NAME, TPL_DESCR, TPL_PATTERN, TPL_FIELDS)
values ('CWT',
        'CWOps minitest (no rst, name, member#/country)',
        'CS(N|S)CS(N|S)',
        'calls,exc1s,exc2s,callr,exc1r,exc2r');