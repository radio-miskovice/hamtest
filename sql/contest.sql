-- database tables create script
-- assumes database 'hamtest' owned by 'hamtest_owner'
-- in order tu run this script you need to be logged as user with create table, create constraint privileges


\c hamtest

--> Level 0: Contest
-- Primary key sequence
drop table if exists QSO ;
drop table if exists LOGFILE ;
drop table if exists CONTEST ;

create table CONTEST (
   CTST_PK       serial primary key,
   CTST_NAME     varchar(255) not null,
   UTC_FROM timestamp not null,
   UTC_TO   timestamp not null,
   NOTE          text 
) ;

alter table CONTEST owner to HAMTEST_OWNER ;

alter table CONTEST 
  add constraint CU_CONTEST_NAME_UNIQUE unique (CTST_NAME) ;
alter table CONTEST
  add constraint C_CONTEST_START_END check ( UTC_FROM < UTC_TO );
create index X_CTST_FROM on CONTEST (UTC_FROM) ;
create index X_CTST_TO   on CONTEST (UTC_TO) ;

comment on table CONTEST is 'Contest list' ;
comment on column CONTEST.CTST_PK is 'Autogenerated primary key' ;
comment on column CONTEST.CTST_NAME is 'Contest name (must be unique)' ;
comment on column CONTEST.UTC_FROM is 'Contest start date and time in UTC (inclusive)' ;
comment on column CONTEST.UTC_TO is 'Contest end date and time in UTC (inclusive)' ;
comment on column CONTEST.NOTE is 'Any remark about contest' ;

create table LOGFILE (
   LOGF_PK       bigserial primary key,
   LOGF_FILENAME varchar(255) not null,
   UPLOADED_TS   timestamptz not null,
   CALLSIGN      varchar(255) not null,
   CATEGORY      varchar(255) not null default 'CHECKLOG',
   NOTE          text,
   CTST_PK       integer references CONTEST(CTST_PK) 
)  ;

alter table LOGFILE owner to HAMTEST_OWNER ;
   
create index X_LOGF_FILENAME on LOGFILE(LOGF_FILENAME) ;
create index X_LOGF_UPLOAD   on LOGFILE(UPLOADED_TS) ;
create index X_LOGF_CALLSIGN on LOGFILE(CALLSIGN) ;

comment on table LOGFILE is 'Uploaded log files' ;
comment on column LOGFILE.LOGF_PK is 'Autogenerated primary key' ;
comment on column LOGFILE.LOGF_FILENAME is 'Uploaded file name' ;
comment on column LOGFILE.UPLOADED_TS is 'File upload time' ;
comment on column LOGFILE.CALLSIGN is 'Logging station call sign' ;
comment on column LOGFILE.CATEGORY is 'Log entry category from the log file' ;
comment on column LOGFILE.CTST_PK is 'Foreign key to CONTEST' ;
comment on column LOGFILE.NOTE is 'Any remark about log file' ;

create table QSO (
  QSO_PK    bigserial primary key,
  LOGF_PK   bigint    not null references LOGFILE( LOGF_PK ), 
  QSO_TIME  timestamp not null,
  QSO_BAND  varchar(20) not null,
  QSO_MODE  varchar(20) not null,
  CALLS     varchar(80) not null,
  RSTS      varchar(10) null,
  NRS       integer,
  EXC1S     varchar(40),
  EXC2S     varchar(40),
  CALLR     varchar(80) not null,
  RSTR      varchar(10),
  NRR       integer,
  EXC1R     varchar(40),
  EXC2R     varchar(40),
  IS_IGNORED   boolean ,
  IS_PROCESSED boolean ,
  IS_VALID     boolean ,
  ERROR_TYPE   varchar(80)
)  ;

alter table QSO owner to HAMTEST_OWNER ;

comment on table QSO is 'Table of contacts';
comment on column QSO.LOGF_PK is 'Reference to log';
comment on column QSO.QSO_TIME is 'QSO date and time as logged (UTC)';
comment on column QSO.QSO_BAND is 'Frequency band as logged';
comment on column QSO.QSO_MODE is 'QSO mode as logged';
comment on column QSO.CALLS is 'Logging station callsign (should be same as LOGFILE.CALLSIGN)';
comment on column QSO.RSTS is 'RS(T) sent by logging station';
comment on column QSO.NRS is 'Serial number sent by logging station';
comment on column QSO.EXC1S is 'Extra exchange 1 sent by logging stations';
comment on column QSO.EXC2S is 'Extra exchange 2 sent by logging stations';
comment on column QSO.CALLR is 'Contacted station callsign';
comment on column QSO.RSTR is 'RS(T) received by logging station';
comment on column QSO.NRR is 'Serial number received by logging station';
comment on column QSO.EXC1R is 'Extra exchange 1 received by logging station';
comment on column QSO.EXC2R is 'Extra exchange 1 received by logging station';
comment on column QSO.IS_IGNORED is 'TRUE indicates that this record must be ignored (not processed)';
comment on column QSO.IS_PROCESSED is 'TRUE if the record was already processed';
comment on column QSO.IS_VALID is 'TRUE if the record is confirmed (valid)';
comment on column QSO.ERROR_TYPE is 'Error description if the record is not valid';
